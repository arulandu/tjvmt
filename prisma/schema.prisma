// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

// USER //

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  ionId String @unique
  ionUsername String
  schoolEmail String
  
  name String
  nickname String
  email String
  profilePicUrl String
  profilePicData String
  // TODO: separate admin and competitor into separate models?
  admin Boolean @default(false)
  polls Poll[]
  pollResponses PollResponse[]

  discordTag String?
  discordId String?

  competitor Boolean @default(true)
  submissions Submission[]
  applications Application[]
  authoredProblems Problem[] @relation("AuthoredProblems")
  solvedProblems Problem[] @relation("SolvedProblems", fields: [solvedProblemIds], references: [id])
  solvedProblemIds String[] @db.ObjectId
}

// TSTs //

model TST {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  weighted Boolean @default(false)

  submissions Submission[]
  solves Int[]
}

model Submission { 
  id String @id @default(auto()) @map("_id") @db.ObjectId

  answers Int[]
  score Float @default(-1.0)
  index Float @default(-1.0)

  writer Boolean @default(false)

  tst TST @relation(fields: [tstId], references: [id])
  tstId String @db.ObjectId

  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model Selection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  size Int
  drops Int @default(0)
  weights Json?

  applications Application[]
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  index Float @default(-1.0)
  elligible Boolean @default(true)

  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  selection Selection @relation(fields: [selectionId], references: [id])
  selectionId String @db.ObjectId
}

// PROBLEMS //
model Problem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  content String
  answer String
  approved Boolean @default(false)
  createdAt DateTime

  author User @relation("AuthoredProblems", fields: [authorId], references: [id])
  authorId String @db.ObjectId

  solvers User[] @relation("SolvedProblems", fields: [solverIds], references: [id])
  solverIds String[] @db.ObjectId
}

// POLLS //

model Poll {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  startDate DateTime
  endDate DateTime?
  closed Boolean @default(false)
  
  text String?
  password String @default("")
  options String[]
  responses PollResponse[]

  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model PollResponse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  date DateTime
  optionIndex Int
  
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String @db.ObjectId

  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}